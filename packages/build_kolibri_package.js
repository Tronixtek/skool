/* Build file for kolibri package */
const fs = require('node:fs');
const path = require('node:path');
const { writeSourceToFile } = require('kolibri-format');
const glob = require('kolibri-tools/lib/glob');
const { generateApiKeys } = require('kolibri-tools/lib/apiSpecExportTools');

const apiSpecHeader = `
/*
 * This file defines the API for the core Kolibri app.
 * This file is automatically generated using the kolibri package.json
 * exports and exposes fields by the kolibri-tools package.
 */

`;

function rebuildApiSpec() {
  // First we read the directory structure of the kolibri folder to infer the list of modules
  // that are available to be imported.
  const kolibriFolder = path.resolve(__dirname, './kolibri');
  const kolibriFiles = glob
    .sync(`${kolibriFolder}/**/*.{js,vue}`, {
      ignore: ['**/internal/**', '**/__tests__/**', '**/__mocks__/**'],
    })
    .map(f => {
      const { dir, name } = path.parse(f);
      return path.join(dir, name);
    })
    .map(f => f.replace(kolibriFolder, ''))
    .map(f => f.replace(/\/index$/, ''))
    .sort();
  // Then we generate the list of modules that are exposed in the kolibri package.json
  const newApiSpec = {};
  for (const key of kolibriFiles) {
    const specValue = '.' + key;
    // When we are able to move everything into a src folder
    // we can update the right hand side of this
    newApiSpec[specValue] = specValue === '.' ? './index' : specValue;
  }
  newApiSpec['./package.json'] = './package.json';
  const kolibriPackageJsonFilePath = path.resolve(__dirname, './kolibri/package.json');
  const kolibriPackageJson = JSON.parse(fs.readFileSync(kolibriPackageJsonFilePath));
  const updatedKolibriPackageJson = {
    ...kolibriPackageJson,
    exports: newApiSpec,
  };
  writeSourceToFile(kolibriPackageJsonFilePath, JSON.stringify(updatedKolibriPackageJson, null, 2));
  const apiSpecFilePath = path.resolve(__dirname, './kolibri/internal/apiSpec.js');
  const updatedApiKeys = generateApiKeys(updatedKolibriPackageJson.exports);
  let apiSpecContent = apiSpecHeader;
  apiSpecContent += 'export default {\n';
  for (const key of updatedApiKeys) {
    apiSpecContent += `  '${key}': require('${key}'),\n`;
  }
  apiSpecContent += '};\n';
  writeSourceToFile(apiSpecFilePath, apiSpecContent);
}

rebuildApiSpec();
